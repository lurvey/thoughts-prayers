'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _decurve = require('./decurve');

var _decurve2 = _interopRequireDefault(_decurve);

var _length = require('./length');

var _length2 = _interopRequireDefault(_length);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var angle = function angle(x1, y1, x2, y2, a) {
  if (x1 === x2) {
    return y1 >= y2 ? 0 : 180;
  }

  var b = 100;
  var c = (0, _length.linearLength)(x2, y2, x1, y1 - b);
  var ang = (0, _helpers.angleFromSides)(a, b, c);

  return x1 < x2 ? ang : 360 - ang;
};

var over = function over(shape, length, totalLength, desiredLength) {
  var _shape = shape[length - 2];
  var x1 = _shape.x;
  var y1 = _shape.y;
  var _shape2 = shape[length - 1];
  var x2 = _shape2.x;
  var y2 = _shape2.y;

  var segmentLength = (0, _length.linearLength)(x1, y1, x2, y2);
  var segmentInterval = (desiredLength - totalLength) / segmentLength + 1;
  return { x1: x1, y1: y1, x2: x2, y2: y2, segmentInterval: segmentInterval, segmentLength: segmentLength };
};

var position = function position(shape, interval, accuracy) {
  var s = (0, _decurve2.default)(shape, accuracy);
  var l = s.length;
  var t = (0, _length2.default)(s);
  var d = t * interval;

  var _ref = interval > 1 ? over(s, l, t, d) : interval < 0 ? under(s, d) : within(s, l, d);

  var x1 = _ref.x1;
  var y1 = _ref.y1;
  var x2 = _ref.x2;
  var y2 = _ref.y2;
  var segmentInterval = _ref.segmentInterval;
  var segmentLength = _ref.segmentLength;


  return {
    angle: angle(x1, y1, x2, y2, segmentLength),
    x: (0, _helpers.numberAtInterval)(x1, x2, segmentInterval),
    y: (0, _helpers.numberAtInterval)(y1, y2, segmentInterval)
  };
};

var under = function under(shape, desiredLength) {
  var _shape$ = shape[0];
  var x1 = _shape$.x;
  var y1 = _shape$.y;
  var _shape$2 = shape[1];
  var x2 = _shape$2.x;
  var y2 = _shape$2.y;

  var segmentLength = (0, _length.linearLength)(x1, y1, x2, y2);
  var segmentInterval = desiredLength / segmentLength;
  return { x1: x1, y1: y1, x2: x2, y2: y2, segmentInterval: segmentInterval, segmentLength: segmentLength };
};

var within = function within(shape, length, desiredLength) {
  var currentLength = 0;

  for (var i = 0; i < length; i++) {
    var moveTo = shape[i].moveTo;


    if (!moveTo) {
      var _shape3 = shape[i - 1];
      var x1 = _shape3.x;
      var y1 = _shape3.y;
      var _shape$i = shape[i];
      var x2 = _shape$i.x;
      var y2 = _shape$i.y;


      var segmentLength = (0, _length.linearLength)(x1, y1, x2, y2);

      if (currentLength + segmentLength >= desiredLength) {
        var segmentInterval = (desiredLength - currentLength) / segmentLength;
        return { x1: x1, y1: y1, x2: x2, y2: y2, segmentInterval: segmentInterval, segmentLength: segmentLength };
      }

      currentLength += segmentLength;
    }
  }
};

exports.default = position;