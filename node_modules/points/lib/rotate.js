'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _helpers = require('./helpers');

var _boundingBox2 = require('./boundingBox');

var _boundingBox3 = _interopRequireDefault(_boundingBox2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var rotatePoint = function rotatePoint(x, y, c, s, about) {
  var offsetX = about.x;
  var offsetY = about.y;

  var relativeX = x - offsetX;
  var relativeY = y - offsetY;

  return [relativeX * c - relativeY * s + offsetX, relativeX * s + relativeY * c + offsetY];
};

var rotatePoints = function rotatePoints(shape, angle, about) {
  return shape.map(function (point) {
    var r = angle * Math.PI / 180;
    var c = Math.cos(r);
    var s = Math.sin(r);

    var _rotatePoint = rotatePoint(point.x, point.y, c, s, about);

    var _rotatePoint2 = _slicedToArray(_rotatePoint, 2);

    var x = _rotatePoint2[0];
    var y = _rotatePoint2[1];

    var p = _extends({}, point, { x: x, y: y });

    if (p.curve) {
      if (p.curve.type === 'quadratic' || p.curve.type === 'cubic') {
        var _rotatePoint3 = rotatePoint(p.curve.x1, p.curve.y1, c, s, about);

        var _rotatePoint4 = _slicedToArray(_rotatePoint3, 2);

        var x1 = _rotatePoint4[0];
        var y1 = _rotatePoint4[1];

        p.curve = _extends({}, p.curve, { x1: x1, y1: y1 });
      }

      if (p.curve.type === 'cubic') {
        var _rotatePoint5 = rotatePoint(p.curve.x2, p.curve.y2, c, s, about);

        var _rotatePoint6 = _slicedToArray(_rotatePoint5, 2);

        var x2 = _rotatePoint6[0];
        var y2 = _rotatePoint6[1];

        p.curve = _extends({}, p.curve, { x2: x2, y2: y2 });
      }
    }

    return p;
  });
};

var rotate = function rotate(s, angle) {
  var _boundingBox = (0, _boundingBox3.default)(s);

  var about = _boundingBox.center;

  return (0, _helpers.applyFuncToShapes)(rotatePoints, s, angle, about);
};

exports.default = rotate;