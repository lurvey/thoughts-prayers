'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _helpers = require('./helpers');

var _cubify = require('./cubify');

var _cubify2 = _interopRequireDefault(_cubify);

var _add = require('./add');

var _length = require('./length');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var angle = function angle(triangle) {
  var _triangle$ = _slicedToArray(triangle[0], 2);

  var ax = _triangle$[0];
  var ay = _triangle$[1];

  var _triangle$2 = _slicedToArray(triangle[1], 2);

  var bx = _triangle$2[0];
  var by = _triangle$2[1];

  var _triangle$3 = _slicedToArray(triangle[2], 2);

  var cx = _triangle$3[0];
  var cy = _triangle$3[1];


  var a = (0, _length.linearLength)(ax, ay, bx, by);
  var b = (0, _length.linearLength)(bx, by, cx, cy);
  var c = (0, _length.linearLength)(cx, cy, ax, ay);

  return (0, _helpers.angleFromSides)(a, b, c);
};

var curved = function curved(shape) {
  return shape.reduce(function (c, _ref) {
    var curve = _ref.curve;
    return curve ? true : c;
  }, false);
};

var decurve = function decurve(shape) {
  var accuracy = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

  if (!curved(shape)) {
    return shape;
  }

  var s = (0, _cubify2.default)(shape);
  var d = [];

  s.map(function (point, i) {
    if (point.curve) {
      var prevPoint = s[i - 1];
      straighten(prevPoint, point, accuracy).map(function (p) {
        return d.push(p);
      });
    } else {
      d.push(point);
    }
  });

  return d;
};

var straight = function straight(x1, y1, cx1, cy1, x2, y2, cx2, cy2, accuracy) {
  var t1 = [[cx1, cy1], [x2, y2], [x1, y1]];
  var t2 = [[cx2, cy2], [x1, y1], [x2, y2]];
  return angle(t1) < accuracy && angle(t2) < accuracy;
};

var straighten = function straighten(prevPoint, point, accuracy) {
  var x1 = prevPoint.x;
  var y1 = prevPoint.y;
  var x2 = point.x;
  var y2 = point.y;
  var curve = point.curve;
  var cx1 = curve.x1;
  var cy1 = curve.y1;
  var cx2 = curve.x2;
  var cy2 = curve.y2;


  if (straight(x1, y1, cx1, cy1, x2, y2, cx2, cy2, accuracy)) {
    return [point];
  }

  var _curvePoints = (0, _add.curvePoints)(prevPoint, point);

  var _curvePoints2 = _slicedToArray(_curvePoints, 2);

  var midPoint = _curvePoints2[0];
  var lastPoint = _curvePoints2[1];


  return [].concat(_toConsumableArray(straighten(prevPoint, midPoint, accuracy)), _toConsumableArray(straighten(midPoint, lastPoint, accuracy)));
};

exports.default = decurve;