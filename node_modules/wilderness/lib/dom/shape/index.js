'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _core = require('../../core');

var _props = require('../../core/shape/props');

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var attrMap = _extends({}, _props.stylePropAttrMap);
var attrKeys = Object.keys(attrMap);
var attrValues = attrKeys.map(function (k) {
  return attrMap[k];
});

var shapeFromNode = function shapeFromNode(node) {
  var attributes = node.attributes;
  var type = node.nodeName;

  var shape = { type: type };

  Object.keys(attributes).map(function (k) {
    var _attributes$k = attributes[k];
    var name = _attributes$k.name;
    var value = _attributes$k.value;


    var i = attrValues.indexOf(name);

    if (i > -1) {
      name = attrKeys[i];
    }

    shape[name] = isNaN(value) ? value : parseFloat(value);
  });

  if (type === 'g') {
    shape.shapes = [].concat(_toConsumableArray(node.children)).map(shapeFromNode);
  }

  return shape;
};

var shapeFromSelector = function shapeFromSelector(selector) {
  if (!selector) {
    return {};
  }

  var node = document.querySelector(selector);

  return shapeFromNode(node);
};

var create = function create(shapes) {
  var s = shapes.map(function (_ref) {
    var selector = _ref.selector;

    var props = _objectWithoutProperties(_ref, ['selector']);

    return _extends({}, shapeFromSelector(selector), props);
  });

  return _extends({
    selector: shapes[0].selector
  }, (0, _core.create)(s));
};

exports.create = create;

exports.default = function () {
  for (var _len = arguments.length, shapes = Array(_len), _key = 0; _key < _len; _key++) {
    shapes[_key] = arguments[_key];
  }

  var shape = create(shapes);
  (0, _core.state)(shape);
  return shape;
};

;