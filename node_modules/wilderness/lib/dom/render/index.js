'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var addNodes = function addNodes(target, renderables) {
  var container = svg(target);

  renderables.map(function (_ref) {
    var nodes = _ref.nodes;
    var selector = _ref.selector;
    var state = _ref.state;

    nodes.map(function (n, i) {
      if (i === 0 && selector) {
        var el = container.querySelector(selector);
        el.parentNode.replaceChild(n, el);
      } else {
        container.appendChild(n);
      }

      if (!state.shapes[i].d) {
        container = n;
      }
    });
  });
};

var createNodes = function createNodes(shape) {
  shape.nodes = shape.state.shapes.map(function (_ref2) {
    var d = _ref2.d;

    if (d) {
      return document.createElementNS('http://www.w3.org/2000/svg', 'path');
    }

    return document.createElementNS('http://www.w3.org/2000/svg', 'g');
  });
};

var render = function render(target) {
  for (var _len = arguments.length, renderables = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    renderables[_key - 1] = arguments[_key];
  }

  renderables.map(function (renderable) {
    renderNodes(renderable);
  });

  addNodes(target, renderables);
};

var renderNodes = function renderNodes(renderable) {
  if (!renderable.nodes) {
    createNodes(renderable);
  }

  updateNodes(renderable);
};

var svgAttrs = ['height', 'preserveAspectRatio', 'viewBox', 'width'];

var svg = function svg(target) {
  var selector = target.selector;

  var el = _objectWithoutProperties(target, ['selector']);

  if (!selector) {
    return el;
  }

  var outer = document.querySelector(selector);

  if (outer.nodeName === 'svg') {
    return outer;
  }

  var inner = outer.querySelector('svg');

  if (inner.nodeName === 'svg') {
    return inner;
  }

  var s = document.createElementNS('http://www.w3.org/2000/svg', 'svg');

  Object.keys(target).filter(function (attr) {
    return svgAttrs.indexOf(attr) !== -1;
  }).forEach(function (attr) {
    s.setAttribute(attr, target[attr]);
  });

  outer.appendChild(s);

  return s;
};

var updateNodes = function updateNodes(_ref3) {
  var nodes = _ref3.nodes;
  var state = _ref3.state;

  nodes.map(function (n, i) {
    var shape = state.shapes[i];

    Object.keys(shape).forEach(function (key) {
      n.setAttribute(key, shape[key]);
    });
  });
};

exports.renderNodes = renderNodes;
exports.default = render;