'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var range = function range(value, min, max) {
  return Math.max(min, Math.min(max, value));
};

var isHexStr = function isHexStr(v) {
  return v.match(/^#(?:[0-9a-f]{3}){1,2}$/i) !== null;
};
var isRgbStr = function isRgbStr(v) {
  return v.startsWith('rgb(');
};
var isRgbaStr = function isRgbaStr(v) {
  return v.startsWith('rgba(');
};

var hexToObj = function hexToObj(hex) {
  var value = hex.replace('#', '');

  if (value.length === 3) {
    value = value.split('').map(function (v) {
      return '' + v + v;
    }).join('');
  }

  return {
    middleware: 'color',
    colorType: 'hex',
    r: parseInt(value.slice(0, 2), 16),
    g: parseInt(value.slice(2, 4), 16),
    b: parseInt(value.slice(4, 6), 16),
    a: 1
  };
};

var rgbToObj = function rgbToObj(v) {
  var rgb = v.replace(/\s/g, '');

  var _rgb$substring$split = rgb.substring(4, rgb.length - 1).split(',');

  var _rgb$substring$split2 = _slicedToArray(_rgb$substring$split, 3);

  var r = _rgb$substring$split2[0];
  var g = _rgb$substring$split2[1];
  var b = _rgb$substring$split2[2];


  return {
    middleware: 'color',
    colorType: 'rgb',
    r: parseFloat(r),
    g: parseFloat(g),
    b: parseFloat(b),
    a: 1
  };
};

var rgbaToObj = function rgbaToObj(v) {
  var rgba = v.replace(/\s/g, '');

  var _rgba$substring$split = rgba.substring(5, rgba.length - 1).split(',');

  var _rgba$substring$split2 = _slicedToArray(_rgba$substring$split, 4);

  var r = _rgba$substring$split2[0];
  var g = _rgba$substring$split2[1];
  var b = _rgba$substring$split2[2];
  var a = _rgba$substring$split2[3];


  return {
    middleware: 'color',
    colorType: 'rgba',
    r: parseFloat(r),
    g: parseFloat(g),
    b: parseFloat(b),
    a: parseFloat(a)
  };
};

var objToHex = function objToHex(obj) {
  var r = Math.ceil(range(obj.r, 0, 255)).toString(16);
  var g = Math.ceil(range(obj.g, 0, 255)).toString(16);
  var b = Math.ceil(range(obj.b, 0, 255)).toString(16);

  r = r.length === 1 ? '0' + r : r;
  g = g.length === 1 ? '0' + g : g;
  b = b.length === 1 ? '0' + b : b;

  return '#' + r + g + b;
};

var objToRgb = function objToRgb(_ref) {
  var r = _ref.r;
  var g = _ref.g;
  var b = _ref.b;
  return 'rgb(' + range(r, 0, 255) + ',' + range(g, 0, 255) + ',' + range(b, 0, 255) + ')';
};

var objToRgba = function objToRgba(_ref2) {
  var r = _ref2.r;
  var g = _ref2.g;
  var b = _ref2.b;
  var a = _ref2.a;
  return 'rgba(' + range(r, 0, 255) + ',' + range(g, 0, 255) + ',' + range(b, 0, 255) + ',' + range(a, 0, 1) + ')';
};

var colorIn = function colorIn(v) {
  if (isHexStr(v)) {
    return hexToObj(v);
  } else if (isRgbStr(v)) {
    return rgbToObj(v);
  } else if (isRgbaStr(v)) {
    return rgbaToObj(v);
  }

  return v;
};

var colorOut = function colorOut(v) {
  var colorType = v.colorType;
  var middleware = v.middleware;


  if (middleware === 'color') {
    switch (colorType) {
      case 'rgba':
        return objToRgba(v);
      case 'rgb':
        return objToRgb(v);
      case 'hex':
        return objToHex(v);
    }
  }

  return v;
};

exports.colorIn = colorIn;
exports.colorOut = colorOut;