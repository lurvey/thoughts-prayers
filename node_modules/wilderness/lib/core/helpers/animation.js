'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.previousIteration = exports.paused = exports.iterationsComplete = exports.finished = exports.easingFunc = exports.currentReverse = exports.currentState = exports.currentIteration = undefined;

var _tweenFunctions = require('tween-functions');

var _tweenFunctions2 = _interopRequireDefault(_tweenFunctions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var currentIteration = function currentIteration(totalIterations) {
  return Math.max(1, Math.ceil(totalIterations));
};

var currentState = function currentState() {
  var animation = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var _animation$alternate = animation.alternate;
  var alternate = _animation$alternate === undefined ? false : _animation$alternate;
  var _animation$initialPro = animation.initialProgress;
  var initialProgress = _animation$initialPro === undefined ? 0 : _animation$initialPro;
  var _animation$reverse = animation.reverse;
  var reverse = _animation$reverse === undefined ? false : _animation$reverse;
  var _animation$started = animation.started;
  var started = _animation$started === undefined ? false : _animation$started;


  var iterations = started ? iterationsComplete(animation) : 0;
  var totalIterations = iterations + initialProgress;
  var i = currentIteration(totalIterations);
  var r = currentReverse(alternate, i, reverse);
  var progress = totalIterations - previousIteration(totalIterations);

  return {
    currentProgress: r ? 1 - progress : progress,
    currentReverse: r,
    iterationsComplete: iterations
  };
};

var currentReverse = function currentReverse(alternate, iteration, reverse) {
  return alternate ? iteration % 2 === 0 ? !reverse : reverse : reverse;
};

var easingFunc = function easingFunc(easing, defaultEasing) {
  var e = easing || defaultEasing;
  return typeof e === 'function' ? e : _tweenFunctions2.default[e];
};

var finished = function finished(animation) {
  return iterationsComplete(animation) >= animation.iterations;
};

var iterationsComplete = function iterationsComplete(_ref) {
  var duration = _ref.duration;
  var iterations = _ref.iterations;
  var play = _ref.play;
  var pause = _ref.pause;

  var time = Math.max(0, pause ? pause - play : Date.now() - play);
  return Math.min(iterations, time / duration);
};

var paused = function paused(_ref2) {
  var pause = _ref2.pause;
  return Boolean(pause);
};

var previousIteration = function previousIteration(totalIterations) {
  return Math.max(0, totalIterations % 1 === 0 ? Math.floor(totalIterations - 0.1) : Math.floor(totalIterations));
};

exports.currentIteration = currentIteration;
exports.currentState = currentState;
exports.currentReverse = currentReverse;
exports.easingFunc = easingFunc;
exports.finished = finished;
exports.iterationsComplete = iterationsComplete;
exports.paused = paused;
exports.previousIteration = previousIteration;