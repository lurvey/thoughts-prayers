'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tick = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _helpers = require('../helpers');

var _shape = require('../shape');

var init = function init(playable, options) {
  var timeline = playable.timeline;
  var _playable$state = playable.state;
  var state = _playable$state === undefined ? {} : _playable$state;
  var _state$animation = state.animation;
  var animation = _state$animation === undefined ? {} : _state$animation;
  var durationDefault = timeline.duration;
  var keyframes = timeline.keyframes;


  var now = Date.now();

  var _optionDefaults$anima = _extends({}, optionDefaults, animation, options);

  var alternate = _optionDefaults$anima.alternate;
  var delay = _optionDefaults$anima.delay;
  var _optionDefaults$anima2 = _optionDefaults$anima.duration;
  var duration = _optionDefaults$anima2 === undefined ? durationDefault : _optionDefaults$anima2;
  var easing = _optionDefaults$anima.easing;
  var finish = _optionDefaults$anima.finish;
  var rate = _optionDefaults$anima.rate;
  var start = _optionDefaults$anima.start;
  var update = _optionDefaults$anima.update;

  var _currentState = (0, _helpers.currentState)(animation);

  var currentProgress = _currentState.currentProgress;
  var currentReverse = _currentState.currentReverse;
  var iterationsComplete = _currentState.iterationsComplete;

  var reverse = currentReverse;
  var reverseChanged = false;

  if (typeof options.reverse !== 'undefined') {
    currentReverse = options.reverse;
    reverse = options.reverse;

    if (animation.started) {
      reverseChanged = options.reverse !== currentReverse;
    }
  }

  var initialProgress = reverse && !reverseChanged || !reverse && reverseChanged ? 1 - currentProgress : currentProgress;

  if (typeof options.initialProgress !== 'undefined') {
    initialProgress = options.initialProgress;
  }

  var iterations = reverse ? initialProgress : 1 - initialProgress;

  if (animation.started) {
    iterations = animation.iterations - iterationsComplete;
  }

  if (typeof options.iterations !== 'undefined') {
    iterations = options.iterations;
  }

  if (typeof start === 'function') {
    start();
  }

  state.animation = {
    alternate: alternate,
    currentProgress: currentProgress,
    currentReverse: currentReverse,
    duration: duration / rate,
    easing: easing,
    finish: finish,
    finished: false,
    initialProgress: initialProgress,
    iterations: iterations,
    iterationsComplete: iterationsComplete,
    keyframes: keyframes.map(function () {
      return {
        finished: false,
        reverse: currentReverse,
        started: false
      };
    }),
    play: now + delay,
    reverse: reverse,
    start: start,
    started: true,
    update: update
  };
};

var optionDefaults = {
  alternate: false,
  delay: 0,
  easing: 'easeInOutQuad',
  rate: 1
};

var play = function play(playable) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var t = arguments.length <= 2 || arguments[2] === undefined ? tick : arguments[2];

  init(playable, options);
  t(playable);
};

var tick = function tick(playable) {
  (0, _shape.state)(playable);
  (0, _shape.events)(playable);
};

exports.tick = tick;
exports.default = play;